{"version":3,"sources":["../src/lib/generateColor.ts"],"sourcesContent":["import hexToHSL from './hexToHSL.js';\r\nimport hslToHex from './hslToHex.js';\r\nimport type { Color, HSL, Shade } from './interfaces.js';\r\n\r\nconst generateColor = ({\r\n\thex,\r\n\tpreserve,\r\n\tshades\r\n}: {\r\n\thex: string;\r\n\tpreserve: boolean;\r\n\tshades: Shade[];\r\n}): Color => {\r\n\t// convert hex to hsl\r\n\tconst colorHSL = hexToHSL(hex);\r\n\r\n\t// initiate shade object\r\n\tconst obj: Color = {};\r\n\r\n\t// initiate lightnessDelta object\r\n\tconst lightnessDelta: { [key: string]: number } = {};\r\n\r\n\t// generate shades\r\n\tshades.forEach(({ name, lightness }: Shade) => {\r\n\t\t// deconstruct h & s\r\n\t\tconst { h, s, l } = colorHSL;\r\n\r\n\t\t// generate shade hsl\r\n\t\tconst hsl: HSL = { h, s, l: lightness };\r\n\r\n\t\t// convert hsl to hex\r\n\t\tconst hex = hslToHex(hsl);\r\n\r\n\t\t// update shade object\r\n\t\tobj[name] = hex;\r\n\r\n\t\t// update lightnessDelta if preserving color\r\n\t\tif (preserve) lightnessDelta[name] = Math.abs(l - lightness);\r\n\t});\r\n\r\n\t// if preserving color, inject original color\r\n\tif (preserve) {\r\n\t\tconst [closestShade] = Object.keys(lightnessDelta).sort(\r\n\t\t\t(a, b) => lightnessDelta[a] - lightnessDelta[b]\r\n\t\t);\r\n\t\tobj[closestShade] = hex;\r\n\t}\r\n\r\n\treturn obj;\r\n};\r\n\r\nexport { generateColor };\r\n"],"mappings":";;;;;;;;AAIA,IAAM,gBAAgB,CAAC;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACD,MAIa;AAEZ,QAAM,WAAW,iBAAS,GAAG;AAG7B,QAAM,MAAa,CAAC;AAGpB,QAAM,iBAA4C,CAAC;AAGnD,SAAO,QAAQ,CAAC,EAAE,MAAM,UAAU,MAAa;AAE9C,UAAM,EAAE,GAAG,GAAG,EAAE,IAAI;AAGpB,UAAM,MAAW,EAAE,GAAG,GAAG,GAAG,UAAU;AAGtC,UAAMA,OAAM,iBAAS,GAAG;AAGxB,QAAI,IAAI,IAAIA;AAGZ,QAAI,SAAU,gBAAe,IAAI,IAAI,KAAK,IAAI,IAAI,SAAS;AAAA,EAC5D,CAAC;AAGD,MAAI,UAAU;AACb,UAAM,CAAC,YAAY,IAAI,OAAO,KAAK,cAAc,EAAE;AAAA,MAClD,CAAC,GAAG,MAAM,eAAe,CAAC,IAAI,eAAe,CAAC;AAAA,IAC/C;AACA,QAAI,YAAY,IAAI;AAAA,EACrB;AAEA,SAAO;AACR;","names":["hex"]}