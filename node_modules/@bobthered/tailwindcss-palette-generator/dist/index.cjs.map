{"version":3,"sources":["../src/lib/index.ts","../src/lib/hexToHSL.ts","../src/lib/hslToHex.ts","../src/lib/generateColor.ts"],"sourcesContent":["import { generateColor } from './generateColor.js';\nimport type { Color, Palette, Shade } from './interfaces.js';\n\nconst tailwindcssPaletteGenerator = (\n\toptions:\n\t\t| string\n\t\t| string[]\n\t\t| { colors?: string[]; names?: string[]; preserve?: boolean; shades?: Shade[] }\n): Palette => {\n\t// defaults\n\tlet colors: string[] = [];\n\tlet names: string[] = [\n\t\t'primary',\n\t\t'secondary',\n\t\t'tertiary',\n\t\t'quaternary',\n\t\t'quinary',\n\t\t'senary',\n\t\t'septenary',\n\t\t'octonary',\n\t\t'nonary',\n\t\t'denary'\n\t];\n\tlet preserve: boolean = true;\n\tlet shades: Shade[] = [\n\t\t{ name: '50', lightness: 98 },\n\t\t{ name: '100', lightness: 95 },\n\t\t{ name: '200', lightness: 90 },\n\t\t{ name: '300', lightness: 82 },\n\t\t{ name: '400', lightness: 64 },\n\t\t{ name: '500', lightness: 46 },\n\t\t{ name: '600', lightness: 33 },\n\t\t{ name: '700', lightness: 24 },\n\t\t{ name: '800', lightness: 14 },\n\t\t{ name: '900', lightness: 7 },\n\t\t{ name: '950', lightness: 4 }\n\t];\n\n\t// check options type\n\tif (typeof options === 'string') options = { colors: [options], names, preserve, shades };\n\tif (typeof options === 'object' && Array.isArray(options))\n\t\toptions = { colors: options, names, preserve, shades };\n\tif (typeof options === 'object' && !Array.isArray(options))\n\t\toptions = Object.assign({ colors, names, preserve, shades }, options);\n\n\t// initiate palette\n\tconst palette: Palette = {};\n\n\t// destructure options\n\t({ colors = colors, names = names, preserve = preserve, shades = shades } = options);\n\n\t// loop through palette\n\tcolors.forEach((hex: string, i: number) => {\n\t\tconst name: string = names[i];\n\t\tconst color: Color = generateColor({ hex, preserve, shades });\n\t\tpalette[name] = color;\n\t});\n\n\treturn palette;\n};\n\nexport { tailwindcssPaletteGenerator };\n","import type { HSL } from './interfaces.js';\r\n\r\nconst hexToHSL = (hex: string): HSL => {\r\n\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex) || [];\r\n\ttry {\r\n\t\tlet r = parseInt(result[1], 16);\r\n\t\tlet g = parseInt(result[2], 16);\r\n\t\tlet b = parseInt(result[3], 16);\r\n\t\t(r /= 255), (g /= 255), (b /= 255);\r\n\t\tconst max = Math.max(r, g, b),\r\n\t\t\tmin = Math.min(r, g, b);\r\n\t\tlet h = 0,\r\n\t\t\ts,\r\n\t\t\tl = (max + min) / 2;\r\n\t\tif (max == min) {\r\n\t\t\th = s = 0; // achromatic\r\n\t\t} else {\r\n\t\t\tconst d = max - min;\r\n\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\t\t\tswitch (max) {\r\n\t\t\t\tcase r:\r\n\t\t\t\t\th = (g - b) / d + (g < b ? 6 : 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase g:\r\n\t\t\t\t\th = (b - r) / d + 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase b:\r\n\t\t\t\t\th = (r - g) / d + 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\th /= 6;\r\n\t\t}\r\n\t\tconst HSL: HSL = { h: 0, s: 0, l: 0 };\r\n\t\tHSL.h = Math.round(h * 360);\r\n\t\tHSL.s = Math.round(s * 100);\r\n\t\tHSL.l = Math.round(l * 100);\r\n\t\treturn HSL;\r\n\t} catch (error) {\r\n\t\tconsole.log(hex);\r\n\t\treturn { h: 0, s: 0, l: 0 };\r\n\t}\r\n};\r\n\r\nexport default hexToHSL;\r\n","import type { HSL } from './interfaces.js';\r\n\r\nconst hslToHEX = ({ h, s, l }: HSL): string => {\r\n\tl /= 100;\r\n\tconst a = (s * Math.min(l, 1 - l)) / 100;\r\n\tconst f = (n: number) => {\r\n\t\tconst k = (n + h / 30) % 12;\r\n\t\tconst color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n\t\treturn Math.round(255 * color)\r\n\t\t\t.toString(16)\r\n\t\t\t.padStart(2, '0'); // convert to Hex and prefix \"0\" if needed\r\n\t};\r\n\treturn `#${f(0)}${f(8)}${f(4)}`;\r\n};\r\n\r\nexport default hslToHEX;\r\n","import hexToHSL from './hexToHSL.js';\r\nimport hslToHex from './hslToHex.js';\r\nimport type { Color, HSL, Shade } from './interfaces.js';\r\n\r\nconst generateColor = ({\r\n\thex,\r\n\tpreserve,\r\n\tshades\r\n}: {\r\n\thex: string;\r\n\tpreserve: boolean;\r\n\tshades: Shade[];\r\n}): Color => {\r\n\t// convert hex to hsl\r\n\tconst colorHSL = hexToHSL(hex);\r\n\r\n\t// initiate shade object\r\n\tconst obj: Color = {};\r\n\r\n\t// initiate lightnessDelta object\r\n\tconst lightnessDelta: { [key: string]: number } = {};\r\n\r\n\t// generate shades\r\n\tshades.forEach(({ name, lightness }: Shade) => {\r\n\t\t// deconstruct h & s\r\n\t\tconst { h, s, l } = colorHSL;\r\n\r\n\t\t// generate shade hsl\r\n\t\tconst hsl: HSL = { h, s, l: lightness };\r\n\r\n\t\t// convert hsl to hex\r\n\t\tconst hex = hslToHex(hsl);\r\n\r\n\t\t// update shade object\r\n\t\tobj[name] = hex;\r\n\r\n\t\t// update lightnessDelta if preserving color\r\n\t\tif (preserve) lightnessDelta[name] = Math.abs(l - lightness);\r\n\t});\r\n\r\n\t// if preserving color, inject original color\r\n\tif (preserve) {\r\n\t\tconst [closestShade] = Object.keys(lightnessDelta).sort(\r\n\t\t\t(a, b) => lightnessDelta[a] - lightnessDelta[b]\r\n\t\t);\r\n\t\tobj[closestShade] = hex;\r\n\t}\r\n\r\n\treturn obj;\r\n};\r\n\r\nexport { generateColor };\r\n"],"mappings":"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","names":["hex"]}